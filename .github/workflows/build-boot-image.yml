name: Build Boot Image

on:
  workflow_dispatch:
  schedule:
    - cron: "0 3 1 * *"   # 每月 1 日 03:00 自动构建

jobs:
  # ======================================================
  # 1. Build Linux kernel + Initramfs + systemd-boot setup
  # ======================================================
  build-boot-files:
    runs-on: ubuntu-latest
    container:
      image: archlinux:latest
    outputs:
      release_tag: ${{ steps.tag_info.outputs.NEW_TAG }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install dependencies
        run: |
          pacman -Sy --noconfirm base-devel linux dracut systemd git

      - name: Prepare build directories
        run: |
          mkdir -p out/boot/loader/entries
          mkdir -p out/boot/EFI

      - name: Generate initramfs
        run: |
          echo "==> Generating initramfs..."
          KERNEL_RELEASE=$(ls /usr/lib/modules/ | head -n 1)
          echo "Detected Arch Kernel Release (for dracut): $KERNEL_RELEASE"
          dracut --force out/boot/initramfs-linux.img "$KERNEL_RELEASE"
          cp /boot/vmlinuz-linux out/boot/vmlinuz-linux

      - name: Install systemd-boot (EFI loader)
        run: |
          echo "==> Copying systemd-boot EFI loader..."
          SYSTEMD_BOOT_EFI="/usr/lib/systemd/boot/efi/systemd-bootx64.efi"
          TARGET_EFI_DIR="out/boot/EFI/systemd"
          TARGET_BOOT_DIR="out/boot/EFI/BOOT"
          mkdir -p "$TARGET_EFI_DIR" "$TARGET_BOOT_DIR"
          cp "$SYSTEMD_BOOT_EFI" "$TARGET_EFI_DIR/systemd-bootx64.efi"
          cp "$SYSTEMD_BOOT_EFI" "$TARGET_BOOT_DIR/bootx64.efi"
          echo "✅ systemd-boot EFI loader copied."

      - name: Create systemd-boot loader configuration
        run: |
          cat > out/boot/loader/loader.conf <<'EOF'
          default fireflyos
          timeout 3
          editor no
          EOF

          cat > out/boot/loader/entries/fireflyos.conf <<'EOF'
          title   Firefly OS
          linux   /vmlinuz-linux
          initrd  /initramfs-linux.img
          options root=LABEL=FIREFLYOS_ROOT1 rw
          EOF

      - name: Calculate release tag
        id: tag_info
        run: |
          RELEASE_DATE=$(date +'%Y-%m-%d')
          TIMESTAMP=$(date +%s)
          NEW_TAG="${RELEASE_DATE}-${TIMESTAMP}"
          echo "NEW_TAG=$NEW_TAG" >> $GITHUB_OUTPUT
          echo "✅ Generated tag: $NEW_TAG"

      - name: Archive boot directory
        run: |
          tar -czf out/boot-files.tar.gz -C out/boot .
      
      - name: Upload boot artifact
        uses: actions/upload-artifact@v4
        with:
          name: boot-files
          path: out/boot-files.tar.gz
          retention-days: 7

  # ======================================================
  # 2. Create Boot Image (Pure FAT32 filesystem only)
  # ======================================================
  create-boot-image:
    runs-on: ubuntu-latest
    needs: build-boot-files
    steps:
      - name: Download boot files
        uses: actions/download-artifact@v4
        with:
          name: boot-files
          path: out/

      - name: Install image tools
        run: |
          sudo apt-get update
          sudo apt-get install -y dosfstools mtools gpg rsync

      - name: Setup GPG on Host
        run: |
          echo "${{ secrets.GPG_PRIVATE_KEY }}" > /tmp/gpg.key
          gpg --batch --import /tmp/gpg.key
          rm -f /tmp/gpg.key

      - name: Extract boot directory
        run: |
          mkdir -p out/boot
          tar -xzf out/boot-files.tar.gz -C out/boot

      - name: Create FAT32 boot image (no GPT)
        env:
          IMAGE_FILE: out/boot.img
          GPG_KEY_ID: ${{ secrets.GPG_KEY_ID }}
        run: |
          set -euo pipefail
          IMAGE_FILE="$IMAGE_FILE"
          MOUNT_DIR=$(mktemp -d)

          echo "==> Calculating required image size..."
          BOOT_SIZE_BYTES=$(du -sb out/boot | awk '{print $1}')
          BOOT_SIZE_MB=$(( (BOOT_SIZE_BYTES + 1024*1024 - 1) / (1024*1024) ))
          SAFETY_MARGIN_MB=64
          MIN_SIZE_MB=256
          TOTAL_SIZE_MB=$(( BOOT_SIZE_MB + SAFETY_MARGIN_MB ))
          if [ "$TOTAL_SIZE_MB" -lt "$MIN_SIZE_MB" ]; then
            TOTAL_SIZE_MB=$MIN_SIZE_MB
          fi

          echo "Boot content size: ${BOOT_SIZE_MB} MB"
          echo "Allocated image size: ${TOTAL_SIZE_MB} MB"

          echo "==> Creating FAT32 filesystem image..."
          truncate -s "${TOTAL_SIZE_MB}M" "$IMAGE_FILE"
          mkfs.vfat -F32 -n EFI "$IMAGE_FILE"

          echo "==> Mounting image..."
          sudo mount -o loop "$IMAGE_FILE" "$MOUNT_DIR"

          echo "==> Copying boot files into FAT32 image..."
          sudo rsync -rtv --no-perms --no-owner --no-group out/boot/ "$MOUNT_DIR/"

          echo "==> Sync and unmount..."
          sudo sync
          sudo umount "$MOUNT_DIR"
          rm -rf "$MOUNT_DIR"

          echo "==> Signing boot image..."
          gpg --batch --yes --detach-sign --armor \
              --local-user "$GPG_KEY_ID" \
              -o "${IMAGE_FILE}.sig" "$IMAGE_FILE"

          echo "✅ Pure FAT32 boot image created and signed successfully."
          ls -lh out/

      - name: Upload boot image artifact
        uses: actions/upload-artifact@v4
        with:
          name: boot-image
          path: |
            out/boot.img
            out/boot.img.sig
          retention-days: 7

  # ======================================================
  # 3. Release boot image
  # ======================================================
  release:
    runs-on: ubuntu-latest
    needs: [build-boot-files, create-boot-image]
    permissions:
      contents: write
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Download boot image artifact
        uses: actions/download-artifact@v4
        with:
          name: boot-image
          path: out/

      - name: Create and push Git tag
        id: create_tag
        env:
          NEW_TAG: ${{ needs.build-boot-files.outputs.release_tag }}
        run: |
          git config user.name "GitHub Actions Bot"
          git config user.email "41898282+github-actions[bot]@users.noreply.github.com"
          REMOTE_URL="https://x-access-token:${{ secrets.GITHUB_TOKEN }}@github.com/${{ github.repository }}.git"
          git remote set-url origin "$REMOTE_URL"

          if git ls-remote --tags origin | grep -q "refs/tags/$NEW_TAG$"; then
            echo "⚠️ Tag $NEW_TAG already exists. Skipping tag creation."
            echo "tag_created=false" >> $GITHUB_OUTPUT
          else
            git tag -a "$NEW_TAG" -m "Boot image release for $NEW_TAG"
            git push origin "$NEW_TAG"
            echo "✅ Tag $NEW_TAG created successfully."
            echo "tag_created=true" >> $GITHUB_OUTPUT
          fi

      - name: Create GitHub Release with Boot Image
        if: steps.create_tag.outputs.tag_created == 'true'
        uses: softprops/action-gh-release@v2
        with:
          files: |
            out/boot.img
            out/boot.img.sig
          tag_name: ${{ needs.build-boot-files.outputs.release_tag }}
          name: "Boot Image (FAT32) - ${{ needs.build-boot-files.outputs.release_tag }}"
          body: |
            ## Boot Partition Image (FAT32 Only)
            This release includes a pure FAT32 EFI boot image containing:
            - Linux Kernel (vmlinuz-linux)
            - Initramfs (dracut)
            - systemd-boot EFI loader

            ✅ Safe to dd directly into an existing EFI partition, e.g. `/dev/sda1`.
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
